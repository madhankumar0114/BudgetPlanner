package com.example.demo.controller;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.example.demo.entity.Budget;
import com.example.demo.entity.Credentials;
import com.example.demo.entity.Expense;
import com.example.demo.entity.AccountInfo;
import com.example.demo.entity.Profile;
import com.example.demo.entity.User;
import com.example.demo.repo.BudgetRepository;
import com.example.demo.repo.CredentialsRepository;
import com.example.demo.repo.ExpenseRepository;
import com.example.demo.repo.ExpenseSummaryRepository;
import com.example.demo.repo.AccountInfoRepository;
import com.example.demo.repo.ProfileRepository;
import com.example.demo.repo.UserRepository;
import com.example.demo.view.ExpenseSummary;
import com.example.demo.view.IExpenseSummary;
import com.sun.research.ws.wadl.Response;

@Controller
@Transactional
public class LoginController {

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	@Autowired
	private BudgetRepository budgetRepository;

	@Autowired
	private AccountInfoRepository infoRepository;

	private int userId;
	private AccountInfo accInfo;

	@Autowired
	private CredentialsRepository credentialsRepository;

	@Autowired
	private ExpenseRepository expenseRepository;

	@Autowired
	private ExpenseSummaryRepository expenseSummaryRepository;

	// LOGIN PAGE

	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String login(ModelMap model) {
		return ("sign_in");
	}

	@RequestMapping(value = "/sign_in", method = RequestMethod.GET)
	public String showsign_in(ModelMap model) {
		return ("sign_in");
	}

	@RequestMapping(value = "/logout", method = RequestMethod.GET)
	public String logout(ModelMap model) {
		accInfo.setEndTime(LocalDateTime.now());
		accInfo.setStatus(null);
		infoRepository.save(accInfo);

		accInfo = null;
		userId = 0;

		return ("sign_in");
	}

	// SignIn

	@PostMapping(value = "/sign_in")
	public String login(@RequestParam(value = "username") String userName,
			@RequestParam(value = "psw") String password) {
		Credentials user = credentialsRepository.findByUsernameAndPassword(userName, password);

		if (user == null) {
			return "sign_in";
		}

		userId = user.getId();

		AccountInfo info = new AccountInfo();
		info.setUserId(userId);
		info.setStartTime(LocalDateTime.now());
		info.setStatus("Current session");

		infoRepository.save(info);

		accInfo = info;
		return ("home");
	}

//	 FORGOT

	@RequestMapping(value = "/forgot", method = RequestMethod.GET)
	public String showforgotpage(ModelMap model) {
		return ("forgot");
	}

	@PostMapping(value = "/forgot")
	public ModelAndView forgotPassword(@RequestParam(value = "username") String userName,
			@RequestParam(value = "email") String email, @RequestParam(value = "secret_question") String secretQuestion,
			@RequestParam(value = "secret_answer") String secretAnswer) {
		User user = userRepository.findByUsernameAndEmail(userName, email);
		if (user == null) {
			return new ModelAndView("/forgot");
		}

		Credentials credentials = credentialsRepository.findByUsernameAndSecretQuestionAndSecretAnswer(userName,
				secretQuestion, secretAnswer);

		if (credentials == null) {
			return new ModelAndView("/forgot");
		}

		ModelAndView model = new ModelAndView("/changepassword");
		model.addObject("userId", user.getId());

		return model;
	}

	@PostMapping(value = "/changepassword")
	public String changePassword(@RequestParam(value = "user_id", required = false) String userId,
			@RequestParam(value = "password") String password,
			@RequestParam(value = "confirm_psw") String confirmPassword) {
		if (!password.equals(confirmPassword)) {
			return "error";
		}

		int parsedUserId = 0;
		if (!userId.isBlank()) {
			parsedUserId = Integer.parseInt(userId);
		}

		int uId = (parsedUserId > 0) ? parsedUserId : this.userId;
		User user = userRepository.findByUserId(uId);

		Credentials credentials = credentialsRepository.findByUsername(user.getUsername());
		credentials.setPassword(password);

		credentialsRepository.save(credentials);

		AccountInfo info = new AccountInfo();
		info.setUserId(uId);
		info.setStartTime(LocalDateTime.now());
		info.setEndTime(LocalDateTime.now());
		info.setStatus("Password changed");

		infoRepository.save(info);

		this.userId = 0;
		accInfo = null;

		return ("sign_in");
	}

//	CHANGE PASSWORD

	@RequestMapping(value = "/changepassword", method = RequestMethod.GET)
	public String showchangepasswordpage(ModelMap model) {
		return ("changepassword");
	}

// SignUp

	@RequestMapping(value = "/sign_up", method = RequestMethod.GET)
	public String signUp(ModelMap model) {
		return ("sign_up");
	}

	@RequestMapping(value = "/create_user", method = RequestMethod.POST)
	public String createUser(@RequestParam(value = "username") String userName,
			@RequestParam(value = "firstname") String firstName, @RequestParam(value = "lastname") String lastName,
			@RequestParam(value = "dob") String dob, @RequestParam(value = "secret_answer") String secretAnswer,
			@RequestParam(value = "secret_question") String secretQuestion, @RequestParam(value = "phone") String phone,
			@RequestParam(value = "email") String email, @RequestParam(value = "psw") String password,
			@RequestParam(value = "pswrepeat") String repeatPassword) {
		if (!password.equals(repeatPassword)) {
			return ("error_pwd_mismatch");
		}

		if (userRepository.findByUsername(userName) != null) {
			return ("error_user_exists");
		}
		User user = new User();
		user.setFirstName(firstName);
		user.setLastName(lastName);
		user.setUsername(userName);
		user.setPhone(phone);
		user.setEmail(email);
		user.setDob(LocalDate.parse(dob));

		Credentials credentials = new Credentials();
		credentials.setUsername(userName);
		credentials.setPassword(password);
		credentials.setSecretQuestion(secretQuestion);
		credentials.setSecretAnswer(secretAnswer);

		userRepository.save(user);
		credentialsRepository.save(credentials);

		userId = user.getId();

		AccountInfo info = new AccountInfo();
		info.setUserId(userId);
		info.setStartTime(LocalDateTime.now());

		infoRepository.save(info);
		accInfo = info;

		return ("home");
	}

	@RequestMapping(value = "/test2", method = RequestMethod.GET)
	public String test2(ModelMap model) {
		return ("test2");
	}

	@RequestMapping(value = "/error", method = RequestMethod.GET)
	public String showerrorpage(ModelMap model) {
		return ("error");
	}

	@GetMapping(path = "/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		return userRepository.findAll();
	}

// TODAY EXPENSE

	@PostMapping("/today_expense")
	public ModelAndView Today(@RequestParam(value = "expenseid", required = false) String expenseId,
			@RequestParam(value = "expensename") String expenseName, @RequestParam(value = "category") String category,
			@RequestParam(value = "expensetype") String expenseType, @RequestParam(value = "amount") double amount) {
		LocalDate today = LocalDate.now();
		// create entity
		// save entity
		// List<Expense> expenses = repository.findByuseridAndDate(userId,today)
		// model.addObject("expenses",expenses);
		if (userId == 0) {
			userId = 1;
		}

		ModelAndView model = new ModelAndView("/today_expense");
		List<Expense> expenses = expenseRepository.findByUserIdAndDate(userId, today);
		model.addObject("expenses", expenses);

		if (expenseName == null || expenseName.isBlank()) {
			return model;
		}

		Expense expense = new Expense();
		expense.setExpenseName(expenseName);
		expense.setCategory(category);
		expense.setExpenseType(expenseType);
		expense.setAmount(amount);
		expense.setDate(today);
		expense.setUserId(userId);

		int eId = (expenseId == null || expenseId.isBlank()) ? 0 : Integer.parseInt(expenseId);
		if (eId > 0) {
			expense.setExpenseId(eId);
		}
		expenseRepository.save(expense);

		if (eId == 0) {
			expenses.add(expense);
		}
		return model;
	}

	@RequestMapping(value = "/today_expense", method = RequestMethod.GET)
	public ModelAndView todayexpense(@RequestParam(value = "id", required = false) String id) {
		ModelAndView model = new ModelAndView("/today_expense");

		LocalDate today = LocalDate.now();
		List<Expense> expenses = expenseRepository.findByUserIdAndDate(userId, today);
		model.addObject("expenses", expenses);

		if (id != null) {
			Expense exps = expenseRepository.findByExpenseId(Integer.parseInt(id));
			if (exps != null) {
				model.addObject("exps", exps);
			}
		}
		return model;
	}

// FUTURE EXPENSE

	@PostMapping("/future_expense")
	public ModelAndView Future(@RequestParam(value = "expenseid", required = false) String expenseId,
			@RequestParam(value = "expensename") String expenseName, @RequestParam(value = "category") String category,
			@RequestParam(value = "expensetype") String expenseType, @RequestParam(value = "amount") double amount,
			@RequestParam(value = "date") String date) {
		// create entity // save entity // List<Expense> expenses
		// =repository.findByuseridAndDate(userId,today)
		// model.addObject("expenses", expenses);
		LocalDate localDate = LocalDate.parse(date);
		if (userId == 0) {
			userId = 1;
		}

		ModelAndView model = new ModelAndView("/future_expense");

		LocalDate today = LocalDate.now();
		List<Expense> expenses = expenseRepository.findFutureExpense(userId, today);
		model.addObject("expenses", expenses);

		if (expenseName == null || expenseName.isBlank()) {
			return model;
		}

		Expense expense = new Expense();
		expense.setExpenseName(expenseName);
		expense.setCategory(category);
		expense.setExpenseType(expenseType);
		expense.setAmount(amount);
		expense.setDate(localDate);
		expense.setUserId(userId);

		int eId = (expenseId == null || expenseId.isBlank()) ? 0 : Integer.parseInt(expenseId);
		if (eId > 0) {
			expense.setExpenseId(eId);
		}
		expenseRepository.save(expense);

		if (eId == 0) {
			expenses.add(expense);
		}
		return model;
	}

	@RequestMapping(value = "/future_expense", method = RequestMethod.GET)
	public ModelAndView futureexpense(@RequestParam(value = "id", required = false) String id) {
		ModelAndView model = new ModelAndView("/future_expense");

		LocalDate today = LocalDate.now();
		List<Expense> expenses = expenseRepository.findFutureExpense(userId, today);
		model.addObject("expenses", expenses);

		if (id != null) {
			Expense exp = expenseRepository.findByExpenseId(Integer.parseInt(id));
			if (exp != null) {
				model.addObject("exp", exp);
			}
		}
		return model;
	}

// DELETE

	@RequestMapping(value = "/delete_expense", method = RequestMethod.GET)
	public ModelAndView deleteExpense(@RequestParam(value = "id") String id,
			@RequestParam(value = "page") String pageName,
			@RequestParam(value = "start", required = false) String start,
			@RequestParam(value = "end", required = false) String end) {
		expenseRepository.deleteByExpenseId(Integer.parseInt(id));

		String page = "/";
		page += (pageName.equals("search")) ? "expense_search" : pageName + "_expense";

		ModelAndView model = new ModelAndView(page);

		LocalDate today = LocalDate.now();
		List<Expense> expenses;
		switch (pageName) {
		case "today":
			expenses = expenseRepository.findByUserIdAndDate(userId, today);
			break;
		case "future":
			expenses = expenseRepository.findFutureExpense(userId, today);
			break;
		case "past":
			expenses = expenseRepository.findPastExpense(userId, today);
			break;
		case "search":
			LocalDate startDate = LocalDate.parse(start);
			LocalDate endDate = LocalDate.parse(end);
			expenses = expenseRepository.findExpenseDuring(userId, startDate, endDate);
			break;
		default:
			expenses = null;
			break;
		}

		model.addObject("expenses", expenses);
		return model;
	}

//	PAST EXPENSE

	@PostMapping("/past_expense")
	public ModelAndView past(@RequestParam(value = "expenseid", required = false) String expenseId,
			@RequestParam(value = "expensename") String expenseName, @RequestParam(value = "category") String category,
			@RequestParam(value = "expensetype") String expenseType, @RequestParam(value = "amount") double amount,
			@RequestParam(value = "date") String date) {

		LocalDate localDate = LocalDate.parse(date);
		if (userId == 0) {
			userId = 1;
		}

		ModelAndView model = new ModelAndView("/past_expense");

		LocalDate today = LocalDate.now();
		List<Expense> expenses = expenseRepository.findPastExpense(userId, today);
		model.addObject("expenses", expenses);

		if (expenseName == null || expenseName.isBlank()) {
			return model;
		}

		Expense expense = new Expense();
		expense.setExpenseName(expenseName);
		expense.setCategory(category);
		expense.setExpenseType(expenseType);
		expense.setAmount(amount);
		expense.setDate(localDate);
		expense.setUserId(userId);

		int eId = (expenseId == null || expenseId.isBlank()) ? 0 : Integer.parseInt(expenseId);
		if (eId > 0) {
			expense.setExpenseId(eId);
		}
		expenseRepository.save(expense);

		if (eId == 0) {
			expenses.add(expense);
		}
		return model;
	}

	@RequestMapping(value = "/past_expense", method = RequestMethod.GET)
	public ModelAndView pastexpense(@RequestParam(value = "id", required = false) String id) {
		ModelAndView model = new ModelAndView("/past_expense");

		LocalDate today = LocalDate.now();
		List<Expense> expenses = expenseRepository.findPastExpense(userId, today);
		model.addObject("expenses", expenses);

		if (id != null) {
			Expense exp = expenseRepository.findByExpenseId(Integer.parseInt(id));
			if (exp != null) {
				model.addObject("exp", exp);
			}
		}
		return model;
	}

// EXPENSE SEARCH

	@PostMapping("/expense_search")
	public ModelAndView searchExpense(@RequestParam(value = "startdate") String start,
			@RequestParam(value = "enddate") String end) {

		LocalDate startDate = LocalDate.parse(start);
		LocalDate endDate = LocalDate.parse(end);

		if (userId == 0) {
			userId = 1;
		}

		ModelAndView model = new ModelAndView("/expense_search");
		List<Expense> expenses = expenseRepository.findExpenseDuring(userId, startDate, endDate);
		model.addObject("expenses", expenses);
		model.addObject("start", startDate);
		model.addObject("end", endDate);

		return model;
	}

	@RequestMapping(value = "/expense_search", method = RequestMethod.GET)
	public String pastexpense(ModelMap model) {
		return ("expense_search");

	}

// profile

	@PostMapping("/profile")
	public ModelAndView profile(@RequestParam(value = "budget_id") String bId,
			@RequestParam(value = "income") double income, @RequestParam(value = "budget") double budget) {

		ModelAndView model = new ModelAndView("/profile");

		LocalDate today = LocalDate.now();
		Budget currBudget;
		int budgetId = (bId != null && !bId.isBlank()) ? Integer.parseInt(bId) : 0;
		if (budgetId > 0) {
			currBudget = budgetRepository.findByBudgetId(budgetId);
			currBudget.setEndDate(today);
			budgetRepository.save(currBudget);
		}

		Budget newBudget = new Budget();
		newBudget.setUserId(userId);
		newBudget.setBudget(budget);
		newBudget.setMonthlyIncome(income);
		newBudget.setStartDate(today);
		budgetRepository.save(newBudget);

		User user = userRepository.findByUserId(userId);
		List<Budget> budgets = budgetRepository.findByUserId(userId);
		double avgExpense = expenseRepository.findAverageExpense(userId, today);

		model.addObject("user", user);
		model.addObject("current", newBudget);
		model.addObject("budgets", budgets);
		model.addObject("avgExpense", round(avgExpense));

		return model;
	}

	@RequestMapping(value = "/profile")
	public ModelAndView showProfile() {
		ModelAndView model = new ModelAndView("/profile");

		User user = userRepository.findByUserId(userId);
		Budget currentBudget = budgetRepository.findCurrentBudget(userId);
		List<Budget> budgets = budgetRepository.findByUserId(userId);
		double avgExpense = expenseRepository.findAverageExpense(userId, LocalDate.now());

		model.addObject("user", user);
		model.addObject("current", currentBudget);
		model.addObject("budgets", budgets);
		model.addObject("avgExpense", round(avgExpense));

		return model;
	}

// HOME

	@RequestMapping(value = "home", method = RequestMethod.GET)
	public String home(Map<String, Object> model) {

		LocalDate today = LocalDate.now();
		Budget budget = budgetRepository.findCurrentBudget(userId);

		model.put("Current", expenseRepository.findByUserIdAndDate(userId, today));
		model.put("Future", expenseRepository.findFutureExpense(userId, today));
		model.put("budget", budget.getBudget());
		model.put("income", budget.getMonthlyIncome());

		return "/home";

	}

//    SESSION

	@RequestMapping(value = "/session", method = RequestMethod.GET)
	public ModelAndView showsessionpage() {
		ModelAndView model = new ModelAndView("/session");

		List<AccountInfo> infoList = infoRepository.findByUserIdOrderByAccountInfoIdDesc(userId);
		model.addObject("infoList", infoList);
		return model;
	}

// EXPENSE SUMMARY
	@RequestMapping(value = "/expense_summary", method = RequestMethod.GET)
	public String redirectToExpenseSummary(ModelMap model) {
		return ("expense_summary");
	}

	@PostMapping(value = "/expense_summary")
	public ModelAndView showExpenseSummary(@RequestParam(value = "time") String timeLine) {
		ModelAndView model = new ModelAndView("/expense_summary");
		List<IExpenseSummary> summary = expenseSummaryRepository.findOverallExpenseSummary(userId);
		double sum = summary.stream().mapToDouble(IExpenseSummary::getAmount).sum();

		List<ExpenseSummary> sList = new ArrayList<>();
		for (IExpenseSummary s : summary) {
			ExpenseSummary es = new ExpenseSummary();
			es.setCategory(s.getCategory());
			es.setAmount(s.getAmount());
			es.setPercentage(round((es.getAmount() / sum) * 100));
			sList.add(es);
		}
		model.addObject("summary", sList);
		return model;

	}

	private double round(double value) {
		return ((double) Math.round(value * 100)) / 100d;
	}
}
